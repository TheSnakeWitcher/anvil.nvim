==============================================================================
CONTENTS                                          *anvil-contents*

    1. Introduction ......................... |anvil-introduction|
    2. Setup ................................ |anvil-setup|
    3. Commands ............................. |anvil-events|
    4. API .................................. |anvil-api|

==============================================================================
1. INTRODUCTION						 *anvil-introduction*


Plugin anvil.nvim allow you to integrate neovim with foundry toolkit tool
anvil(local blockchai).

==============================================================================
2. SETUP						        *anvil-setup*


Make sure to add to call the setup function with the proper configuration on
your `init.lua` file:

    require('anvil').setup({opts})

==============================================================================
3. EVENTS						      *anvil-events*


`AnvilStartPre`						      *AnvilStartPre*

    executed when enter anvil.start() and before start an anvil instance

`AnvilStartPost`					      *AnvilStartPost*

    executed before exit anvil.start() and after start an anvil instance
    receives the `args_tbl` used to start anvil 

`AnvilStopPre`						      *AnvilStopPre*

    executed when enter anvil.stop() and before stop an anvil instance

`AnvilStopPost`						      *AnvilStopPost*

    executed before exit anvil.stop() and after stop an anvil instance


==============================================================================
4. API								 *anvil-api*


anvil.setup({config})					      *anvil.setup()*
        Configures this plugin. Currently supported configuration variables
        are:
        • `name`: a string to be used in the greet message

        Parameters: ~
            {config}(required, table) Table of values; keys are as listed
                above. Accept defaults by omitting the relevant key.

anvil.start({opts})					      *anvil.start()*
    start an anvil instance in background
    {opts} can have following keys:
        • `fork_url`
        • `fork_block_number
        • `fork_chain_id`

anvil.stop()						      *anvil.stop()*
    stop a running anvil instance

anvil.get_accounts({index})				      *anvil.get_accounts()*
    get `account` corresponding to `index` from a running anvil
    instance, if not `index` is provided return all `accounts` 

anvil.get_private_key({account})				      *anvil.get_private_key()*
    get `private_key` corresponding to `account` from a running anvil
    instance, `account` can be an `index` or an `account_address` returned
    from `get_accounts`


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
